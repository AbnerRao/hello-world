2020-1-8 15:22，About GitHub Button
关于GitHub相关按钮的功能用法说明：
每个项目右上角都有三个按钮，分别是watch，star，fork。
watch
可以称之为观察或者监听改变。
对于别人的项目，默认自己都处于 Not watching 的状态，当你选择 Watching，表示你以后会关注这个项目的所有动态，这个项目以后只要发生变动，如被别人提交了 pull request、被别人发起了issue等等情况，你都会在自己的个人通知中心，收到一条通知消息，如果你设置了个人邮箱，那么你的邮箱也可能收到相应的邮件。

star
star 当你点击 star，表示你喜欢这个项目或者通俗点，可以把他理解收藏这个项目。点击 github 个人头像，可以看到 your stars 的条目，点击就可以查看你 star 过的所有项目。
也许是 github 自己也发现了检索的问题，现在 github 增加了一个类似的功能 Manage Topics，可以给自己给自己的项目设置 topic.给自己的项目设置 topic 后，相当于自己给自己的项目设置了一个 tag ，这样可以方便别人搜索。比如要搜索所有 topic 为 android 的项目，你只需要在 GitHub 搜索时输入 `topic android ` 然后搜索即可。

fork
当选择 fork，相当于你自己有了一份原项目的拷贝，当然这个拷贝只是针对当时的项目文件，如果后续原项目文件发生改变，你必须通过其他的方式去同步。
一般来说，我们不需要使用 fork 这个功能，除非有一些项目，可能存在 bug 或者可以继续优化的地方，你想帮助原项目作者去完善这个项目或者单纯的想在原来项目基础上己维护一个属于自己项目（比如我 fork 的 AndroidWeekly 客户端，那么你可以 fork 一份项目下来，然后自己对这个项目进行修改完善，当你觉得项目没问题了，你就可以尝试发起 pull request 给原项目作者了。

使用建议
1、对于一些可能会经常发生变化的会不定期更新的好项目 多使用 watch.
2、喜欢一个项目就 star 它吧~
3、修改开源项目就使用 fork，这样你就可以在原项目的基础上，对项目进行修改提交，现在你是这个项目的主人啦~

小细节
有些时候，你看到一个项目的 star 数有很多，你就想知道到底都有那些人 star 了这个项目，或者 fork 了这个项目，
但是环顾一圈，你却找不到一个入口，后来自己不经意的发现，只要`点击 star 傍边的数字`，就可以查看有哪些人 star 了这个项目。
是不是有点意思，现在你就可以去试试，watch、fork上面的数字都是可以点击的，道理一样。

参考：
作者：大侠咕咚
链接：https://www.jianshu.com/p/6c366b53ea41
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
================================================================
2020-1-8 15:16，About GitHub Merge
关于GitHub合并操作的说明：
merge 的几种形式
  A:普通的 merge
  B:rebase merge
  C:squash merge

对于普通的 merge，分支上的提交次数会提现到合并之后的主分支上。比如主分支上的提交commit是mu1,mu2,mu3;mu3之后创建了分支branch，分支上的提交是bu1,bu2;
那么合并到主分支之后的效果是mu1,mu2,mu3,bu1,bu2.

对于squash merge，也就是压缩合并，跟普通合并的区别在于，会将分支上的多次提交压缩成一个提交点合并到主分支上。借用上面的例子，合并之后的结果是mu1,mu2,mu3,buall.

对于rebase merge，其实是重新设置基线，ebase需要基于一个分支来设置你当前的分支的基线，这基线就是当前分支的开始时间轴向后移动到最新的跟踪分支的最后面，这样你的当前分支就是最新的跟踪分支。这里的操作是基于文件事务处理的，所以你不用怕中间失败会影响文件的一致性。在中间的过程中你可以随时取消rebase 事务。
比如主分支上的提交commit是mu1,mu2,mu3;mu3之后创建了分支branch，分支上的提交是bu1,bu2;在分支准备合并到主分支之前，主分支上已经有新的提交mu4,mu5.这个时候合并branch分支到主分支之后的效果是mu1,mu2,mu3,mu4,mu5,buall.

总结：
rebase 可以尽可能保持 master 分支干净整洁，并且易于识别 author
squash 也可以保持 master 分支干净，但是 master 中 author 都是 maintainer，而不是原 owner
merge 不能保持 master 分支干净，但是保持了所有的 commit history，大多数情况下都是不好的，个别情况挺好

参考：
作者：曹九朵_
链接：https://www.jianshu.com/p/4079284dd970
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

作者：liuliqiang
链接：https://www.jianshu.com/p/684a8ae9dcf1
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
